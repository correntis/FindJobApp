import { UserDocument } from "src/schemas/user.schema";
import { Inject, Injectable, OnModuleInit } from "@nestjs/common";
import { Ctx, InjectBot, On, Start, Update } from "nestjs-telegraf";
import { UsersRepository } from "src/repositories/users.repository";
import { Context, Markup, Telegraf } from "telegraf";
import { Console } from "console";
import { MessagesTemplates } from "src/telegram/message-templates";

@Update()
@Injectable()
export class TelegramService {
  profileMessage: string = "üìù My Profile";

  constructor(
    private readonly usersRepository: UsersRepository,
    @InjectBot() private readonly bot: Telegraf<Context>
  ) {}

  getTelegramLinkForUser(userId: string) {
    return `https://t.me/findjobapp_bot?start=registration_${userId}`;
  }

  async sendNotificationToUser(userId: string, message: string) {
    const user = await this.usersRepository.findById(userId);

    if (user?.telegram) {
      try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ Telegram ID
        await this.bot.telegram.sendMessage(user.telegram, message);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      }
    } else {
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram`
      );
    }
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const chatId = ctx.message?.chat.id;
    const text = ctx.text;

    if (chatId && text?.startsWith("/start")) {
      const isChatExist = await this.usersRepository.getByChatId(
        chatId.toString()
      );

      if (isChatExist && isChatExist.length > 0) {
        await ctx.reply(
          "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–∞—Ä—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º",
          Markup.keyboard([[this.profileMessage]]).resize()
        );

        return;
      }

      const parts = text.split(" ");
      if (parts.length === 2) {
        const registrationId = parts[1].split("_");
        if (registrationId.length === 2) {
          const userId = registrationId[1];
          await this.usersRepository.update(userId, {
            telegram: chatId.toString(),
          });

          await ctx.reply(
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!\n–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö!üòä",
            Markup.keyboard([[this.profileMessage]]).resize()
          );

          return;
        }
      }
    }

    await ctx.reply(
      "–ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ"
    );
  }

  @On("message")
  async onMessage(@Ctx() ctx: Context) {
    if (ctx.message && "sticker" in ctx.message) {
      const stickerId = ctx.message.sticker.file_id;
      await ctx.replyWithSticker(stickerId);
      return;
    }

    if (ctx.message && "text" in ctx.message) {
      const text = ctx.message.text;

      if (text === "üìù My Profile") {
        if (ctx.chat?.id) {
          var user = await this.getProfile(ctx.chat.id.toString());
          await ctx.reply(MessagesTemplates.profile(user), {
            parse_mode: "Markdown",
          });
        }
        return;
      }

      console.log(ctx.message.text);

      await ctx.reply(
        "–Ø —Å–æ–∑–¥–∞–Ω –ª–∏—à—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n–Ø –Ω–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã üòì"
      );
    }
  }

  private async getProfile(chatId: string) {
    return (await this.usersRepository.getByChatId(chatId))[0];
  }
}
